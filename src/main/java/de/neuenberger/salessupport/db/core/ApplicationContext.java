package de.neuenberger.salessupport.db.core;

import java.util.LinkedList;
import java.util.List;

import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.session.transaction.Transaction;

import de.neuenberger.salessupport.db.properties.SystemStringProperties;
import de.neuenberger.salessupport.db.repository.GraphRepository;

public class ApplicationContext {
	private SessionFactory sessionFactory;
	private Session openSession;

	public ApplicationContext() {

	}

	public SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			sessionFactory = new SessionFactory("de.neuenberger.salessupport.db.model");
		}
		return sessionFactory;
	}

	public Session getSession() {
		if (openSession == null) {
			openSession = getSessionFactory().openSession(SystemStringProperties.NEO4J_SERVER.getValue(),
					SystemStringProperties.NEO4J_USERNAME.getValue(), SystemStringProperties.NEO4J_PASSWORD.getValue());
		}
		return openSession;
	}
	
	public <S,G extends GraphRepository<S>> GraphRepository<S> getGraphRepository(Class<S> clazz) {
		return new GraphRepositoryImpl<S>(this, clazz);
	}

	public static class GraphRepositoryImpl<S> implements GraphRepository<S> {
		private ApplicationContext context;
		private Class<S> clazz;

		public GraphRepositoryImpl(ApplicationContext context, Class<S> clazz) {
			this.context = context;
			this.clazz = clazz;
		}

		@Override
		public Iterable<S> findAll(Iterable<Long> nodeIds) {
			List<Long> listNodeIds;
			if (nodeIds instanceof List) {
				listNodeIds = (List<Long>) nodeIds;
			} else {
				listNodeIds = new LinkedList<>();
				for (Long l : nodeIds) {
					listNodeIds.add(l);
				}
			}
			return context.getSession().loadAll(clazz,listNodeIds);
		}

		@Override
		public Iterable<S> findAll() {
			return context.getSession().loadAll(clazz);
		}

		@Override
		public void delete(S arg0) {
			Session session = context.getSession();
			Transaction transaction = session.beginTransaction();
			context.getSession().delete(arg0);
			transaction.commit();
			transaction.close();
		}

		@Override
		public S save(S arg0) {
			Session session = context.getSession();
			Transaction transaction = session.beginTransaction();
			session.save(arg0);
			transaction.commit();
			transaction.close();
			return arg0;
		}
		
	}

}
